"""init

Revision ID: 1ba4d67da108
Revises: 
Create Date: 2023-04-15 00:42:42.415131

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1ba4d67da108'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('color',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('background_color', sa.String(length=50), nullable=False),
    sa.Column('text_color', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_color'))
    )
    op.create_table('configuration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('configuration', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=50), nullable=False),
    sa.Column('url', sa.String(length=250), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_configuration')),
    sa.UniqueConstraint('configuration', name=op.f('uq_configuration_configuration')),
    sa.UniqueConstraint('description', name=op.f('uq_configuration_description'))
    )
    op.create_table('downloading_topology',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('downloading', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_downloading_topology'))
    )
    op.create_table('emulation_platform',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('emulation_platform', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_emulation_platform')),
    sa.UniqueConstraint('emulation_platform', name=op.f('uq_emulation_platform_emulation_platform'))
    )
    op.create_table('install',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('install', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=50), nullable=False),
    sa.Column('url', sa.String(length=250), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_install')),
    sa.UniqueConstraint('description', name=op.f('uq_install_description')),
    sa.UniqueConstraint('install', name=op.f('uq_install_install'))
    )
    op.create_table('link_agreement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('agreement', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=250), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_link_agreement')),
    sa.UniqueConstraint('agreement', name=op.f('uq_link_agreement_agreement')),
    sa.UniqueConstraint('description', name=op.f('uq_link_agreement_description'))
    )
    op.create_table('node',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('node', sa.String(length=39), nullable=False),
    sa.Column('hostname', sa.String(length=255), nullable=True),
    sa.Column('master', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_node')),
    sa.UniqueConstraint('node', name=op.f('uq_node_node'))
    )
    op.create_table('realistic_topology_parameter',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('url', sa.String(length=100), nullable=False),
    sa.Column('file_search_string', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_realistic_topology_parameter'))
    )
    op.create_table('realistic_topology_scheduled_download',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('loop', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_realistic_topology_scheduled_download'))
    )
    op.create_table('router_platform',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('router_platform', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_router_platform')),
    sa.UniqueConstraint('router_platform', name=op.f('uq_router_platform_router_platform'))
    )
    op.create_table('scenario_attack_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scenario_attack_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=250), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scenario_attack_type')),
    sa.UniqueConstraint('description', name=op.f('uq_scenario_attack_type_description')),
    sa.UniqueConstraint('scenario_attack_type', name=op.f('uq_scenario_attack_type_scenario_attack_type'))
    )
    op.create_table('scenario_stuff',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scenario_name', sa.String(length=50), nullable=False),
    sa.Column('scenario_description', sa.String(length=50), nullable=True),
    sa.Column('id_topology', sa.Integer(), nullable=False),
    sa.Column('attacker_list', sa.TEXT(), nullable=False),
    sa.Column('affected_area_list', sa.TEXT(), nullable=False),
    sa.Column('target_list', sa.TEXT(), nullable=False),
    sa.Column('attack_type', sa.Integer(), nullable=False),
    sa.Column('number_of_shortest_paths', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scenario_stuff')),
    sa.UniqueConstraint('scenario_name', name=op.f('uq_scenario_stuff_scenario_name'))
    )
    op.create_table('service',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=50), nullable=False),
    sa.Column('url', sa.String(length=250), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_service')),
    sa.UniqueConstraint('description', name=op.f('uq_service_description')),
    sa.UniqueConstraint('service', name=op.f('uq_service_service'))
    )
    op.create_table('topology_distribution_method',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('topology_distribution_method', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_topology_distribution_method')),
    sa.UniqueConstraint('topology_distribution_method', name=op.f('uq_topology_distribution_method_topology_distribution_method'))
    )
    op.create_table('topology_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('topology_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=250), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_topology_type')),
    sa.UniqueConstraint('description', name=op.f('uq_topology_type_description')),
    sa.UniqueConstraint('topology_type', name=op.f('uq_topology_type_topology_type'))
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('password_hash', sa.String(length=200), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('username', name=op.f('uq_user_username'))
    )
    op.create_table('vantage_point_actor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('vantage_point_actor', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=250), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vantage_point_actor')),
    sa.UniqueConstraint('description', name=op.f('uq_vantage_point_actor_description')),
    sa.UniqueConstraint('vantage_point_actor', name=op.f('uq_vantage_point_actor_vantage_point_actor'))
    )
    op.create_table('node_configuration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_node', sa.Integer(), nullable=True),
    sa.Column('id_configuration', sa.Integer(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('log', sa.String(length=250), nullable=True),
    sa.ForeignKeyConstraint(['id_configuration'], ['configuration.id'], name=op.f('fk_node_configuration_id_configuration_configuration')),
    sa.ForeignKeyConstraint(['id_node'], ['node.id'], name=op.f('fk_node_configuration_id_node_node')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_node_configuration'))
    )
    op.create_index('IndexId3_node', 'node_configuration', ['id_node'], unique=False)
    op.create_index('IndexId_configuration', 'node_configuration', ['id_configuration'], unique=False)
    op.create_table('node_install',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_node', sa.Integer(), nullable=True),
    sa.Column('id_install', sa.Integer(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('log', sa.String(length=250), nullable=True),
    sa.ForeignKeyConstraint(['id_install'], ['install.id'], name=op.f('fk_node_install_id_install_install')),
    sa.ForeignKeyConstraint(['id_node'], ['node.id'], name=op.f('fk_node_install_id_node_node')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_node_install'))
    )
    op.create_index('IndexId2_node', 'node_install', ['id_node'], unique=False)
    op.create_index('IndexId_install', 'node_install', ['id_install'], unique=False)
    op.create_table('node_service',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_node', sa.Integer(), nullable=True),
    sa.Column('id_service', sa.Integer(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('log', sa.String(length=250), nullable=True),
    sa.ForeignKeyConstraint(['id_node'], ['node.id'], name=op.f('fk_node_service_id_node_node')),
    sa.ForeignKeyConstraint(['id_service'], ['service.id'], name=op.f('fk_node_service_id_service_service')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_node_service'))
    )
    op.create_index('IndexId1_node', 'node_service', ['id_node'], unique=False)
    op.create_index('IndexId_service', 'node_service', ['id_service'], unique=False)
    op.create_table('realistic_topology_link_agreement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_link_agreement', sa.Integer(), nullable=True),
    sa.Column('value', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['id_link_agreement'], ['link_agreement.id'], name=op.f('fk_realistic_topology_link_agreement_id_link_agreement_link_agreement')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_realistic_topology_link_agreement')),
    sa.UniqueConstraint('value', name=op.f('uq_realistic_topology_link_agreement_value'))
    )
    op.create_index('IndexId2_link_agreement', 'realistic_topology_link_agreement', ['id_link_agreement'], unique=False)
    op.create_table('topology',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_topology_type', sa.Integer(), nullable=True),
    sa.Column('topology', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['id_topology_type'], ['topology_type.id'], name=op.f('fk_topology_id_topology_type_topology_type')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_topology')),
    sa.UniqueConstraint('topology', name=op.f('uq_topology_topology'))
    )
    op.create_index('IndexId_topology_type', 'topology', ['id_topology_type'], unique=False)
    op.create_table('event_behaviour',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_topology', sa.Integer(), nullable=True),
    sa.Column('start_datetime', sa.String(length=19), nullable=False),
    sa.Column('end_datetime', sa.String(length=19), nullable=False),
    sa.Column('restrict_mode', sa.String(length=11), nullable=False),
    sa.ForeignKeyConstraint(['id_topology'], ['topology.id'], name=op.f('fk_event_behaviour_id_topology_topology')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_event_behaviour'))
    )
    op.create_index('IndexId9_topology', 'event_behaviour', ['id_topology'], unique=False)
    op.create_table('realistic_analysis',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_topology_distribution_method', sa.Integer(), nullable=True),
    sa.Column('id_emulation_platform', sa.Integer(), nullable=True),
    sa.Column('id_router_platform', sa.Integer(), nullable=True),
    sa.Column('id_topology', sa.Integer(), nullable=True),
    sa.Column('include_stub', sa.Boolean(), nullable=True),
    sa.Column('output_path', sa.String(length=250), nullable=True),
    sa.Column('number_of_autonomous_systems', sa.String(length=250), nullable=True),
    sa.Column('time_get_data', sa.String(length=250), nullable=True),
    sa.Column('time_autonomous_system_per_server', sa.String(length=250), nullable=True),
    sa.Column('time_emulate_platform_commands', sa.String(length=250), nullable=True),
    sa.Column('time_router_platform_commands', sa.String(length=250), nullable=True),
    sa.Column('time_write_files', sa.String(length=250), nullable=True),
    sa.Column('time_copy_files', sa.String(length=250), nullable=True),
    sa.ForeignKeyConstraint(['id_emulation_platform'], ['emulation_platform.id'], name=op.f('fk_realistic_analysis_id_emulation_platform_emulation_platform')),
    sa.ForeignKeyConstraint(['id_router_platform'], ['router_platform.id'], name=op.f('fk_realistic_analysis_id_router_platform_router_platform')),
    sa.ForeignKeyConstraint(['id_topology'], ['topology.id'], name=op.f('fk_realistic_analysis_id_topology_topology')),
    sa.ForeignKeyConstraint(['id_topology_distribution_method'], ['topology_distribution_method.id'], name=op.f('fk_realistic_analysis_id_topology_distribution_method_topology_distribution_method')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_realistic_analysis'))
    )
    op.create_index('IndexId8_topology', 'realistic_analysis', ['id_topology'], unique=False)
    op.create_index('IndexId_emulation_platform', 'realistic_analysis', ['id_emulation_platform'], unique=False)
    op.create_index('IndexId_router_platform', 'realistic_analysis', ['id_router_platform'], unique=False)
    op.create_index('IndexId_topology_distribution_method', 'realistic_analysis', ['id_topology_distribution_method'], unique=False)
    op.create_table('region',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_topology', sa.Integer(), nullable=True),
    sa.Column('id_color', sa.Integer(), nullable=True),
    sa.Column('region', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['id_color'], ['color.id'], name=op.f('fk_region_id_color_color')),
    sa.ForeignKeyConstraint(['id_topology'], ['topology.id'], name=op.f('fk_region_id_topology_topology')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_region'))
    )
    op.create_index('IndexId5_topology', 'region', ['id_topology'], unique=False)
    op.create_index('IndexId_color', 'region', ['id_color'], unique=False)
    op.create_table('scenario',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_scenario_attack_type', sa.Integer(), nullable=True),
    sa.Column('id_topology', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_scenario_attack_type'], ['scenario_attack_type.id'], name=op.f('fk_scenario_id_scenario_attack_type_scenario_attack_type')),
    sa.ForeignKeyConstraint(['id_topology'], ['topology.id'], name=op.f('fk_scenario_id_topology_topology')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scenario'))
    )
    op.create_index('IndexId7_topology', 'scenario', ['id_topology'], unique=False)
    op.create_index('IndexId_scenario_attack_type', 'scenario', ['id_scenario_attack_type'], unique=False)
    op.create_table('type_of_service',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_topology', sa.Integer(), nullable=True),
    sa.Column('type_of_service', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['id_topology'], ['topology.id'], name=op.f('fk_type_of_service_id_topology_topology')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_type_of_service'))
    )
    op.create_index('IndexId4_topology', 'type_of_service', ['id_topology'], unique=False)
    op.create_table('type_of_user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_topology', sa.Integer(), nullable=True),
    sa.Column('type_of_user', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['id_topology'], ['topology.id'], name=op.f('fk_type_of_user_id_topology_topology')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_type_of_user'))
    )
    op.create_index('IndexId3_topology', 'type_of_user', ['id_topology'], unique=False)
    op.create_table('autonomous_system',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_topology', sa.Integer(), nullable=True),
    sa.Column('id_region', sa.Integer(), nullable=True),
    sa.Column('autonomous_system', sa.BigInteger(), nullable=False),
    sa.Column('stub', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['id_region'], ['region.id'], name=op.f('fk_autonomous_system_id_region_region')),
    sa.ForeignKeyConstraint(['id_topology'], ['topology.id'], name=op.f('fk_autonomous_system_id_topology_topology')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_autonomous_system'))
    )
    op.create_index('IndexId1_region', 'autonomous_system', ['id_region'], unique=False)
    op.create_index('IndexId1_topology', 'autonomous_system', ['id_topology'], unique=False)
    op.create_index('IndexTopologyAS', 'autonomous_system', ['id_topology', 'autonomous_system'], unique=False)
    op.create_table('bgplay',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_event_behaviour', sa.Integer(), nullable=True),
    sa.Column('resource', sa.String(length=255), nullable=False),
    sa.Column('url', sa.String(length=512), nullable=False),
    sa.ForeignKeyConstraint(['id_event_behaviour'], ['event_behaviour.id'], name=op.f('fk_bgplay_id_event_behaviour_event_behaviour')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bgplay'))
    )
    op.create_index('IndexId1_event_behaviour', 'bgplay', ['id_event_behaviour'], unique=False)
    op.create_table('event_announcement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_event_behaviour', sa.Integer(), nullable=True),
    sa.Column('event_datetime', sa.String(length=19), nullable=False),
    sa.Column('prefix', sa.String(length=255), nullable=True),
    sa.Column('announcer', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['id_event_behaviour'], ['event_behaviour.id'], name=op.f('fk_event_announcement_id_event_behaviour_event_behaviour')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_event_announcement'))
    )
    op.create_index('IndexId3_event_behaviour', 'event_announcement', ['id_event_behaviour'], unique=False)
    op.create_table('event_detail',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_event_behaviour', sa.Integer(), nullable=True),
    sa.Column('time_get_data', sa.String(length=250), nullable=True),
    sa.Column('time_pid_commands', sa.String(length=250), nullable=True),
    sa.Column('time_announcement_commands', sa.String(length=250), nullable=True),
    sa.Column('time_withdrawn_commands', sa.String(length=250), nullable=True),
    sa.Column('time_prepends_commands', sa.String(length=250), nullable=True),
    sa.Column('time_write_config_files', sa.String(length=250), nullable=True),
    sa.Column('time_monitoring_commands', sa.String(length=250), nullable=True),
    sa.Column('time_write_monitoring_files', sa.String(length=250), nullable=True),
    sa.ForeignKeyConstraint(['id_event_behaviour'], ['event_behaviour.id'], name=op.f('fk_event_detail_id_event_behaviour_event_behaviour')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_event_detail'))
    )
    op.create_index('IndexId2_event_behaviour', 'event_detail', ['id_event_behaviour'], unique=False)
    op.create_table('event_monitoring',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_event_behaviour', sa.Integer(), nullable=True),
    sa.Column('event_datetime', sa.String(length=19), nullable=False),
    sa.Column('monitor', sa.BigInteger(), nullable=True),
    sa.Column('all', sa.Boolean(), nullable=True),
    sa.Column('sleep_time', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['id_event_behaviour'], ['event_behaviour.id'], name=op.f('fk_event_monitoring_id_event_behaviour_event_behaviour')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_event_monitoring'))
    )
    op.create_index('IndexId6_event_behaviour', 'event_monitoring', ['id_event_behaviour'], unique=False)
    op.create_table('event_prepend',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_event_behaviour', sa.Integer(), nullable=True),
    sa.Column('event_datetime', sa.String(length=19), nullable=False),
    sa.Column('in_out', sa.String(length=3), nullable=True),
    sa.Column('prefix', sa.String(length=255), nullable=True),
    sa.Column('prepender', sa.BigInteger(), nullable=True),
    sa.Column('prepended', sa.BigInteger(), nullable=True),
    sa.Column('peer', sa.BigInteger(), nullable=True),
    sa.Column('hmt', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_event_behaviour'], ['event_behaviour.id'], name=op.f('fk_event_prepend_id_event_behaviour_event_behaviour')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_event_prepend'))
    )
    op.create_index('IndexId5_event_behaviour', 'event_prepend', ['id_event_behaviour'], unique=False)
    op.create_table('event_withdrawn',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_event_behaviour', sa.Integer(), nullable=True),
    sa.Column('event_datetime', sa.String(length=19), nullable=False),
    sa.Column('prefix', sa.String(length=255), nullable=True),
    sa.Column('withdrawer', sa.BigInteger(), nullable=True),
    sa.Column('in_out', sa.String(length=3), nullable=True),
    sa.Column('peer', sa.BigInteger(), nullable=True),
    sa.Column('withdrawn', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['id_event_behaviour'], ['event_behaviour.id'], name=op.f('fk_event_withdrawn_id_event_behaviour_event_behaviour')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_event_withdrawn'))
    )
    op.create_index('IndexId4_event_behaviour', 'event_withdrawn', ['id_event_behaviour'], unique=False)
    op.create_table('internet_exchange_point',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_topology', sa.Integer(), nullable=True),
    sa.Column('id_region', sa.Integer(), nullable=True),
    sa.Column('internet_exchange_point', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['id_region'], ['region.id'], name=op.f('fk_internet_exchange_point_id_region_region')),
    sa.ForeignKeyConstraint(['id_topology'], ['topology.id'], name=op.f('fk_internet_exchange_point_id_topology_topology')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_internet_exchange_point'))
    )
    op.create_index('IndexId2_region', 'internet_exchange_point', ['id_region'], unique=False)
    op.create_index('IndexId6_topology', 'internet_exchange_point', ['id_topology'], unique=False)
    op.create_table('autonomous_system_internet_exchange_point',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_internet_exchange_point', sa.Integer(), nullable=True),
    sa.Column('id_autonomous_system', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_autonomous_system'], ['autonomous_system.id'], name=op.f('fk_autonomous_system_internet_exchange_point_id_autonomous_system_autonomous_system')),
    sa.ForeignKeyConstraint(['id_internet_exchange_point'], ['internet_exchange_point.id'], name=op.f('fk_autonomous_system_internet_exchange_point_id_internet_exchange_point_internet_exchange_point')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_autonomous_system_internet_exchange_point'))
    )
    op.create_index('IndexId5_autonomous_system', 'autonomous_system_internet_exchange_point', ['id_autonomous_system'], unique=False)
    op.create_index('IndexId_internet_exchange_point', 'autonomous_system_internet_exchange_point', ['id_internet_exchange_point'], unique=False)
    op.create_table('link',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_topology', sa.Integer(), nullable=True),
    sa.Column('id_link_agreement', sa.Integer(), nullable=True),
    sa.Column('id_autonomous_system1', sa.Integer(), nullable=True),
    sa.Column('id_autonomous_system2', sa.Integer(), nullable=True),
    sa.Column('ip_autonomous_system1', sa.String(length=39), nullable=True),
    sa.Column('ip_autonomous_system2', sa.String(length=39), nullable=True),
    sa.Column('mask', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(length=50), nullable=True),
    sa.Column('bandwidth', sa.Integer(), nullable=True),
    sa.Column('delay', sa.Integer(), nullable=True),
    sa.Column('load', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_autonomous_system1'], ['autonomous_system.id'], name=op.f('fk_link_id_autonomous_system1_autonomous_system')),
    sa.ForeignKeyConstraint(['id_autonomous_system2'], ['autonomous_system.id'], name=op.f('fk_link_id_autonomous_system2_autonomous_system')),
    sa.ForeignKeyConstraint(['id_link_agreement'], ['link_agreement.id'], name=op.f('fk_link_id_link_agreement_link_agreement')),
    sa.ForeignKeyConstraint(['id_topology'], ['topology.id'], name=op.f('fk_link_id_topology_topology')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_link'))
    )
    op.create_index('IndexId1_link_agreement', 'link', ['id_link_agreement'], unique=False)
    op.create_index('IndexId2_topology', 'link', ['id_topology'], unique=False)
    op.create_index('IndexId_autonomous_system1', 'link', ['id_autonomous_system1'], unique=False)
    op.create_index('IndexId_autonomous_system2', 'link', ['id_autonomous_system2'], unique=False)
    op.create_table('prefix',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_autonomous_system', sa.Integer(), nullable=True),
    sa.Column('prefix', sa.String(length=39), nullable=False),
    sa.Column('mask', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_autonomous_system'], ['autonomous_system.id'], name=op.f('fk_prefix_id_autonomous_system_autonomous_system')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_prefix'))
    )
    op.create_index('IndexId2_autonomous_system', 'prefix', ['id_autonomous_system'], unique=False)
    op.create_table('router_id',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_autonomous_system', sa.Integer(), nullable=True),
    sa.Column('router_id', sa.String(length=39), nullable=False),
    sa.ForeignKeyConstraint(['id_autonomous_system'], ['autonomous_system.id'], name=op.f('fk_router_id_id_autonomous_system_autonomous_system')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_router_id'))
    )
    op.create_index('IndexId1_autonomous_system', 'router_id', ['id_autonomous_system'], unique=False)
    op.create_table('scenario_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_scenario', sa.Integer(), nullable=True),
    sa.Column('attacker_as', sa.Integer(), nullable=True),
    sa.Column('affected_as', sa.Integer(), nullable=True),
    sa.Column('target_as', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['affected_as'], ['autonomous_system.id'], name=op.f('fk_scenario_item_affected_as_autonomous_system')),
    sa.ForeignKeyConstraint(['attacker_as'], ['autonomous_system.id'], name=op.f('fk_scenario_item_attacker_as_autonomous_system')),
    sa.ForeignKeyConstraint(['id_scenario'], ['scenario.id'], name=op.f('fk_scenario_item_id_scenario_scenario')),
    sa.ForeignKeyConstraint(['target_as'], ['autonomous_system.id'], name=op.f('fk_scenario_item_target_as_autonomous_system')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scenario_item'))
    )
    op.create_index('IndexId1_scenario', 'scenario_item', ['id_scenario'], unique=False)
    op.create_index('IndexId6_autonomous_system', 'scenario_item', ['attacker_as'], unique=False)
    op.create_index('IndexId7_autonomous_system', 'scenario_item', ['affected_as'], unique=False)
    op.create_index('IndexId8_autonomous_system', 'scenario_item', ['target_as'], unique=False)
    op.create_table('type_of_service_autonomous_system',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_autonomous_system', sa.Integer(), nullable=True),
    sa.Column('id_type_of_service', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_autonomous_system'], ['autonomous_system.id'], name=op.f('fk_type_of_service_autonomous_system_id_autonomous_system_autonomous_system')),
    sa.ForeignKeyConstraint(['id_type_of_service'], ['type_of_service.id'], name=op.f('fk_type_of_service_autonomous_system_id_type_of_service_type_of_service')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_type_of_service_autonomous_system'))
    )
    op.create_index('IndexId4_autonomous_system', 'type_of_service_autonomous_system', ['id_autonomous_system'], unique=False)
    op.create_index('IndexId_type_of_service', 'type_of_service_autonomous_system', ['id_type_of_service'], unique=False)
    op.create_table('type_of_user_autonomous_system',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_autonomous_system', sa.Integer(), nullable=True),
    sa.Column('id_type_of_user', sa.Integer(), nullable=True),
    sa.Column('number', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_autonomous_system'], ['autonomous_system.id'], name=op.f('fk_type_of_user_autonomous_system_id_autonomous_system_autonomous_system')),
    sa.ForeignKeyConstraint(['id_type_of_user'], ['type_of_user.id'], name=op.f('fk_type_of_user_autonomous_system_id_type_of_user_type_of_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_type_of_user_autonomous_system'))
    )
    op.create_index('IndexId3_autonomous_system', 'type_of_user_autonomous_system', ['id_autonomous_system'], unique=False)
    op.create_index('IndexId_type_of_user', 'type_of_user_autonomous_system', ['id_type_of_user'], unique=False)
    op.create_table('path',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_scenario_item', sa.Integer(), nullable=True),
    sa.Column('source', sa.Integer(), nullable=True),
    sa.Column('destination', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['destination'], ['vantage_point_actor.id'], name=op.f('fk_path_destination_vantage_point_actor')),
    sa.ForeignKeyConstraint(['id_scenario_item'], ['scenario_item.id'], name=op.f('fk_path_id_scenario_item_scenario_item')),
    sa.ForeignKeyConstraint(['source'], ['vantage_point_actor.id'], name=op.f('fk_path_source_vantage_point_actor')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_path'))
    )
    op.create_index('IndexId1_scenario_item', 'path', ['id_scenario_item'], unique=False)
    op.create_index('IndexId1_vantage_point_actor', 'path', ['source'], unique=False)
    op.create_index('IndexId2_vantage_point_actor', 'path', ['destination'], unique=False)
    op.create_table('path_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_path', sa.Integer(), nullable=True),
    sa.Column('hop', sa.Integer(), nullable=False),
    sa.Column('id_link', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_link'], ['link.id'], name=op.f('fk_path_item_id_link_link')),
    sa.ForeignKeyConstraint(['id_path'], ['path.id'], name=op.f('fk_path_item_id_path_path')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_path_item'))
    )
    op.create_index('IndexId1_link', 'path_item', ['id_link'], unique=False)
    op.create_index('IndexId1_path', 'path_item', ['id_path'], unique=False)
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('IndexId1_path', table_name='path_item')
    op.drop_index('IndexId1_link', table_name='path_item')
    op.drop_table('path_item')
    op.drop_index('IndexId2_vantage_point_actor', table_name='path')
    op.drop_index('IndexId1_vantage_point_actor', table_name='path')
    op.drop_index('IndexId1_scenario_item', table_name='path')
    op.drop_table('path')
    op.drop_index('IndexId_type_of_user', table_name='type_of_user_autonomous_system')
    op.drop_index('IndexId3_autonomous_system', table_name='type_of_user_autonomous_system')
    op.drop_table('type_of_user_autonomous_system')
    op.drop_index('IndexId_type_of_service', table_name='type_of_service_autonomous_system')
    op.drop_index('IndexId4_autonomous_system', table_name='type_of_service_autonomous_system')
    op.drop_table('type_of_service_autonomous_system')
    op.drop_index('IndexId8_autonomous_system', table_name='scenario_item')
    op.drop_index('IndexId7_autonomous_system', table_name='scenario_item')
    op.drop_index('IndexId6_autonomous_system', table_name='scenario_item')
    op.drop_index('IndexId1_scenario', table_name='scenario_item')
    op.drop_table('scenario_item')
    op.drop_index('IndexId1_autonomous_system', table_name='router_id')
    op.drop_table('router_id')
    op.drop_index('IndexId2_autonomous_system', table_name='prefix')
    op.drop_table('prefix')
    op.drop_index('IndexId_autonomous_system2', table_name='link')
    op.drop_index('IndexId_autonomous_system1', table_name='link')
    op.drop_index('IndexId2_topology', table_name='link')
    op.drop_index('IndexId1_link_agreement', table_name='link')
    op.drop_table('link')
    op.drop_index('IndexId_internet_exchange_point', table_name='autonomous_system_internet_exchange_point')
    op.drop_index('IndexId5_autonomous_system', table_name='autonomous_system_internet_exchange_point')
    op.drop_table('autonomous_system_internet_exchange_point')
    op.drop_index('IndexId6_topology', table_name='internet_exchange_point')
    op.drop_index('IndexId2_region', table_name='internet_exchange_point')
    op.drop_table('internet_exchange_point')
    op.drop_index('IndexId4_event_behaviour', table_name='event_withdrawn')
    op.drop_table('event_withdrawn')
    op.drop_index('IndexId5_event_behaviour', table_name='event_prepend')
    op.drop_table('event_prepend')
    op.drop_index('IndexId6_event_behaviour', table_name='event_monitoring')
    op.drop_table('event_monitoring')
    op.drop_index('IndexId2_event_behaviour', table_name='event_detail')
    op.drop_table('event_detail')
    op.drop_index('IndexId3_event_behaviour', table_name='event_announcement')
    op.drop_table('event_announcement')
    op.drop_index('IndexId1_event_behaviour', table_name='bgplay')
    op.drop_table('bgplay')
    op.drop_index('IndexTopologyAS', table_name='autonomous_system')
    op.drop_index('IndexId1_topology', table_name='autonomous_system')
    op.drop_index('IndexId1_region', table_name='autonomous_system')
    op.drop_table('autonomous_system')
    op.drop_index('IndexId3_topology', table_name='type_of_user')
    op.drop_table('type_of_user')
    op.drop_index('IndexId4_topology', table_name='type_of_service')
    op.drop_table('type_of_service')
    op.drop_index('IndexId_scenario_attack_type', table_name='scenario')
    op.drop_index('IndexId7_topology', table_name='scenario')
    op.drop_table('scenario')
    op.drop_index('IndexId_color', table_name='region')
    op.drop_index('IndexId5_topology', table_name='region')
    op.drop_table('region')
    op.drop_index('IndexId_topology_distribution_method', table_name='realistic_analysis')
    op.drop_index('IndexId_router_platform', table_name='realistic_analysis')
    op.drop_index('IndexId_emulation_platform', table_name='realistic_analysis')
    op.drop_index('IndexId8_topology', table_name='realistic_analysis')
    op.drop_table('realistic_analysis')
    op.drop_index('IndexId9_topology', table_name='event_behaviour')
    op.drop_table('event_behaviour')
    op.drop_index('IndexId_topology_type', table_name='topology')
    op.drop_table('topology')
    op.drop_index('IndexId2_link_agreement', table_name='realistic_topology_link_agreement')
    op.drop_table('realistic_topology_link_agreement')
    op.drop_index('IndexId_service', table_name='node_service')
    op.drop_index('IndexId1_node', table_name='node_service')
    op.drop_table('node_service')
    op.drop_index('IndexId_install', table_name='node_install')
    op.drop_index('IndexId2_node', table_name='node_install')
    op.drop_table('node_install')
    op.drop_index('IndexId_configuration', table_name='node_configuration')
    op.drop_index('IndexId3_node', table_name='node_configuration')
    op.drop_table('node_configuration')
    op.drop_table('vantage_point_actor')
    op.drop_table('user')
    op.drop_table('topology_type')
    op.drop_table('topology_distribution_method')
    op.drop_table('service')
    op.drop_table('scenario_stuff')
    op.drop_table('scenario_attack_type')
    op.drop_table('router_platform')
    op.drop_table('realistic_topology_scheduled_download')
    op.drop_table('realistic_topology_parameter')
    op.drop_table('node')
    op.drop_table('link_agreement')
    op.drop_table('install')
    op.drop_table('emulation_platform')
    op.drop_table('downloading_topology')
    op.drop_table('configuration')
    op.drop_table('color')
    # ### end Alembic commands ###
